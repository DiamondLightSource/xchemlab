
enum CaneStatus {
	READY
	FILLING
	AWAY
	BROKEN
}

enum CompoundState {
	NORMAL
	CRYSTALINE
	PRECIPITATED
	BAD_DISPENSE
	PHASE_SEPARATION
}

type Crystal {
	id: UUID!
	plateId: UUID!
	wellNumber: Int!
	crystalState: CrystalState!
	compoundState: CompoundState!
	timestamp: DateTime!
	operatorId: String!
	pinMount: MountedPin
}

enum CrystalState {
	NORMAL
	MELTED
	CRACKED
	JELLY
	COLOURED
}

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime




type LibraryCane {
	barcode: String!
	status: CaneStatus!
	mounts: [MountedCane!]!
}

type LibraryPin {
	barcode: String!
	"""
	Mounting loop size in micrometers.
	"""
	loopSize: Int!
	status: PinStatus!
	mounts: [MountedPin!]!
}

type LibraryPuck {
	barcode: String!
	status: PuckStatus!
	mounts: [MountedPuck!]!
}

type MountedCane {
	id: UUID!
	barcode: String!
	timestamp: DateTime!
	operatorId: String!
	pucks: [MountedPuck!]!
}

type MountedPin {
	id: UUID!
	crystalId: UUID!
	puckMountId: UUID!
	puckLocation: Int!
	barcode: String!
	timestamp: DateTime!
	operatorId: String!
	crystal: Crystal!
	puck: MountedPuck!
}

type MountedPuck {
	id: UUID!
	caneMountId: UUID
	caneLocation: Int
	barcode: String!
	timestamp: DateTime!
	operatorId: String!
	pins: [MountedPin!]!
	cane: MountedCane
}

enum PinStatus {
	READY
	OCCUPIED
	DIRTY
	BROKEN
}

enum PuckStatus {
	READY
	FILLING
	AWAY
	BROKEN
}

type RootMutation {
	createCrystal(well: WellInput!, crystalState: CrystalState!, compoundState: CompoundState!): Crystal!
	registerLibraryCane(barcode: String!): LibraryCane!
	updateLibraryCaneStatus(barcode: String!, status: CaneStatus!): LibraryCane!
	createCaneMount(barcode: String!): MountedCane!
	registerLibraryPuck(barcode: String!): LibraryPuck!
	updateLibraryPuckStatus(barcode: String!, status: PuckStatus!): LibraryPuck!
	createPuck(barcode: String!): MountedPuck!
	registerLibraryPin(barcode: String!, loopSize: Int!): LibraryPin!
	updateLibraryPinStatus(barcode: String!, status: PinStatus!): LibraryPin!
	createPinMount(crystalId: UUID!, puckMountId: UUID!, puckLocation: Int!, barcode: String!): MountedPin!
}

type RootQuery {
	crystal(id: UUID!): Crystal
	libraryCanes: [LibraryCane!]!
	getCaneMount(id: UUID!): MountedCane
	getCaneMounts: [MountedCane!]!
	libraryPucks: [LibraryPuck!]!
	getPuckMount(id: UUID!): MountedPuck
	libraryPins: [LibraryPin!]!
	getPinMount(id: UUID!): MountedPin
}


"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID

input WellInput {
	plate: UUID!
	well: Int!
}

schema {
	query: RootQuery
	mutation: RootMutation
}
